"use client";
import { useEffect, useState } from "react";
import { useGetAllProductsQuery } from "@/redux/api/AllProduct";
import scss from "./Hero.module.scss";
import { useParams } from "next/navigation";
import Bloks from "../homeComponents/Bloks";
import Loader from "../loader/Loader";
import { useGetGenreQuery } from "@/redux/api/Genre";

const Hero: React.FC = () => {
  const { movieq, tvq } = useParams();
  const value = movieq || tvq;

  // State –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const [page, setPage] = useState<number>(1);
  const [products, setProducts] = useState<any[]>([]);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const { data, isLoading, isFetching } = useGetAllProductsQuery({
    value: String(value),
    page: page,
  });

  const { data: genre } = useGetGenreQuery(String(value));
  console.log("üöÄ ~ genre:", genre);

  // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  useEffect(() => {
    if (data) {
      setProducts((prev) => [...prev, ...data.results]); // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
    }
  }, [data]);

  let obj = {
    results: products,
  };

  // –°–ª–µ–¥–∏–º –∑–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  useEffect(() => {
    const handleScroll = () => {
      if (
        window.innerHeight + window.scrollY >=
          document.body.offsetHeight - 500 && // —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        !isFetching
      ) {
        setPage((prev) => prev + 1); // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll); // —É–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  }, [isFetching]);

  return (
    <section className={scss.HeroMovie}>
      <>
        {isLoading ? (
          <Loader />
        ) : (
          <div className="container">
            <div className={scss.content}>
              <div className={scss.heroTitle}>
                <h2>Explore Movies....</h2>
                <div className={scss.filterBlock}>
                  <select name="" id="">
                    {genre?.genres.map((el) => (
                      <>
                        <option value={el.id}>{el.name}</option>
                      </>
                    ))}
                  </select>
                  <select name="" id="">
                    <option value="">Popularity</option>
                    <option value=""></option>
                    <option value=""></option>
                    <option value=""></option>
                    <option value=""></option>
                    <option value=""></option>
                  </select>
                </div>
              </div>
              <Bloks data={obj} type="list" value={String(value)} />
              {isLoading || isFetching ? (
                <div className={scss.loader}>Loading more...</div>
              ) : null}
            </div>
          </div>
        )}
      </>
    </section>
  );
};

export default Hero;
